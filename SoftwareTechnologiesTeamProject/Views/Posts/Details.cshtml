@using Microsoft.AspNet.Identity
@model SoftwareTechnologiesTeamProject.ViewModels.PostDetailsViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div class="post-info-wrapper">
    <h4>Post</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Post.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Post.Title)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Post.Body)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Post.Body)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Post.Date)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Post.Date)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Post.Author.FullName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Post.Author.FullName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Post.Author.Email)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Post.Author.Email)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Post.Tags)
        </dt>

        <dd class="tag-container">

            @foreach (var tag in Model.Post.Tags)
            {
                @Html.ActionLink(tag.Name, "Tag", new { id = tag.Id })
            }
        </dd>

        <dt>
            @if (Model.Post.HasVoted(User.Identity.GetUserId()))
            {
                <span class="glyphicon glyphicon-heart liked"></span>
            }
            else
            {

                @Html.ActionLink(" ", "AddLike", new { id = Model.Post.Id }, new { @class = "glyphicon glyphicon-heart" })
            }
        </dt>

        <dd>
            @Model.Post.VotedUsers.Count
        </dd>
    </dl>

    <p>
        @if (User.IsInRole("Administrators") || (Model.Post.Author != null && User.Identity.Name == Model.Post.Author.UserName))
        {
            @Html.ActionLink("Edit", "Edit", new { id = Model.PostId })
            <br />
        }
        @Html.ActionLink("Back to List", "Index")
    </p>
</div>
<div class="add-comment-wrapper">
    @using (Html.BeginForm("AddComment", "Posts", FormMethod.Post))
    {
        @Html.ValidationMessageFor(model => model.NewCommentContent, "", new { @class = "text-danger" })
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(m => m.PostId)
        @Html.HiddenFor(m => m.CommentAuthorId)
        @Html.HiddenFor(m => m.Post.Author)

        @Html.TextAreaFor(m => m.NewCommentContent, new { @class = "add-comment-text-area" })
        <input type="submit" value="Add comment" class="bottom-right" />
    }

</div>



<div class="comments-wrapper">
    <h1>Comments(@Model.Post.Comments.Count)</h1>

    <div class="comments">
        @foreach (var comment in Model.Post.Comments)
        {
            <div class="single-comment" id="single-comment-@comment.Id">
                <div class="info">
                    <p>
                        <strong>@comment.Author.FullName</strong> - <i>@comment.DateCreated</i>
                    </p>
                </div>
                <div class="actions">
                    @if (User.IsInRole("Administrators") || User.Identity.Name == comment.Author.UserName)
                    {
                        @*@Html.ActionLink("Delete", "DeleteComment", new { id = comment.Id }, new { id = "deleteLink-" + comment.Id })*@
                        <a id="deleteLink-@comment.Id" onclick="showConfirmDelete(@comment.Id)">Delete</a>
                        <a onclick="showEditPostDiv(@comment.Id)" id="editLink-@comment.Id">Edit</a>
                    }
                </div>

                <div class="single-comment-content" id="@comment.Id-content">
                    @Html.DisplayFor(m => comment.Content)
                </div>
                @using (Html.BeginForm("EditComment", "Posts", FormMethod.Post, new { @class = " hidden edit-form", id = comment.Id }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(m => comment.AuthorId)
                    @Html.HiddenFor(m => comment.Id)
                    @Html.HiddenFor(c => comment.DateCreated)
                    @Html.HiddenFor(c => comment.PostId)

                    @Html.TextAreaFor(m => comment.Content)
                    @Html.ValidationMessageFor(model => model.NewCommentContent, "", new { @class = "text-danger" })

                    <div class="edit-comment-actions">
                        <input type="submit" value="Edit" class="edit-comment-button" />
                        <a onclick="cancelEdit(@comment.Id)" class="edit-comment-cancel-link">Cancel</a>
                    </div>
                }

            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        function showEditPostDiv(commentId) {
            $("#" + commentId).removeClass("hidden");
            $('#' + commentId + "-content").hide();
            $("#editLink-" + commentId).hide();
            $("#deleteLink-" + commentId).hide();
        }

        function cancelEdit(commentId) {
            $("#" + commentId).addClass("hidden");
            $('#' + commentId + "-content").show();
            $("#editLink-" + commentId).show();
            $("#deleteLink-" + commentId).show();
        }

        function showConfirmDelete(commentId) {
            $("#single-comment-" + commentId).children().hide();
            let confirmDeleteElements =
                "<div id='confirmDelete-"+ commentId + "' class='confirmDelete'>" +
                    "<p>Confirm delete</p><br>" +
                    "<a href='/Posts/DeleteComment/" + commentId + "' class='confirmDeleteLink'>Delete</a>" +
                    "<a id='cancelDelete-"+ commentId + "' onclick='cancelConfirmDelete(" + commentId + ")' class='cancelConfirmDelete' >Cancel</a>" +
                    "</div>";
            $("#single-comment-" + commentId)
                .append(confirmDeleteElements);
        }

        function cancelConfirmDelete(commentId) {
            $("#confirmDelete-" + commentId).remove();
            $("#single-comment-" + commentId).children().show();
        }
    </script>
}